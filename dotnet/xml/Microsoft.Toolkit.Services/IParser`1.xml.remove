<Type Name="IParser&lt;T&gt;" FullName="Microsoft.Toolkit.Services.IParser&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IParser&lt;out T&gt; : Microsoft.Toolkit.Parsers.IParser&lt;out T&gt; where T : SchemaBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParser`1&lt;(class Microsoft.Toolkit.Services.SchemaBase) + T&gt; implements class Microsoft.Toolkit.Parsers.IParser`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Services.IParser`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParser(Of Out T)&#xA;Implements IParser(Of Out T)" />
  <TypeSignature Language="F#" Value="type IParser&lt;'T (requires 'T :&gt; SchemaBase)&gt; = interface&#xA;    interface IParser&lt;'T (requires 'T :&gt; SchemaBase)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : SchemaBasepublic interface class IParser : Microsoft::Toolkit::Parsers::IParser&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Services</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <BaseTypeName>Microsoft.Toolkit.Services.SchemaBase</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Toolkit.Parsers.IParser&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This interface is being deprecated. Please use the counterpart found in Microsoft.Toolkit.Parsers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Type to parse into.</typeparam>
    <summary>
            Parser interface.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>
